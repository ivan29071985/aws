{"uuid":"7c89ced3-28ac-4a9b-856c-bd2e3ebe06c6","historyId":"767a44aa-5074-57f6-be16-fb8ceb47b799","status":"failed","statusDetails":{"message":"expected '<!doctype html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n    <title>\\n      Amei API - Painel de Administração e Versionamento de Endpoints\\n    </title>\\n    <link\\n      href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap\"\\n      rel=\"stylesheet\"\\n    />\\n    <style>\\n      /* Reset básico de CSS */\\n      * {\\n        margin: 0;\\n        padding: 0;\\n        box-sizing: border-box;\\n      }\\n\\n      body {\\n        font-family: \\'Roboto\\', sans-serif;\\n        background-color: #f0f2f5;\\n        color: #333;\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        flex-direction: column;\\n        overflow: auto;\\n      }\\n\\n      .container {\\n        background-color: #fff;\\n        padding: 20px;\\n        border-radius: 15px;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\\n        max-width: 1200px;\\n        width: 100%;\\n        display: flex;\\n        flex-direction: column;\\n        animation: fadeIn 0.5s ease-in-out;\\n        overflow: auto;\\n      }\\n\\n      @keyframes fadeIn {\\n        from {\\n          opacity: 0;\\n          transform: translateY(10px);\\n        }\\n        to {\\n          opacity: 1;\\n          transform: translateY(0);\\n        }\\n      }\\n\\n      h1,\\n      h2 {\\n        margin-bottom: 20px;\\n        text-align: center;\\n      }\\n\\n      h1 {\\n        font-weight: 700;\\n        color: #007bff;\\n      }\\n\\n      form,\\n      .editor {\\n        display: flex;\\n        flex-direction: column;\\n      }\\n\\n      label {\\n        margin-top: 10px;\\n      }\\n\\n      input,\\n      select,\\n      textarea,\\n      button {\\n        padding: 10px;\\n        margin-top: 5px;\\n        border: 1px solid #ccc;\\n        border-radius: 5px;\\n        font-size: 16px;\\n        outline: none;\\n      }\\n\\n      button {\\n        background-color: #007bff;\\n        color: #fff;\\n        border: none;\\n        cursor: pointer;\\n        margin-top: 20px;\\n        transition:\\n          background-color 0.3s,\\n          box-shadow 0.3s;\\n        outline: none;\\n      }\\n\\n      button:hover {\\n        background-color: #0056b3;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n      }\\n\\n      .fixed-header {\\n        flex-shrink: 0;\\n        background-color: #fff;\\n        z-index: 1;\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: space-between;\\n        padding: 10px 0;\\n      }\\n\\n      .login-form {\\n        box-shadow: rgba(17, 12, 46, 0.15) 0px 48px 100px 0px;\\n        border-radius: 8px;\\n        padding: 35px;\\n        display: flex;\\n        flex-direction: column;\\n        align-items: center;\\n        justify-content: center;\\n        margin: 17%;\\n      }\\n\\n      .scrollable-box {\\n        overflow-y: auto;\\n        border-radius: 5px;\\n        padding: 20px;\\n        background-color: #fff;\\n        height: calc(87vh - 200px);\\n      }\\n\\n      table {\\n        width: 100%;\\n        border-collapse: collapse;\\n      }\\n\\n      th,\\n      td {\\n        padding: 10px;\\n        border: 1px solid #ccc;\\n        text-align: left;\\n      }\\n\\n      th {\\n        background-color: #e9ecef;\\n      }\\n\\n      .list-item {\\n        padding: 10px;\\n        border: 1px solid #ccc;\\n        border-radius: 5px;\\n        margin-top: 5px;\\n        cursor: pointer;\\n        transition:\\n          background-color 0.3s,\\n          box-shadow 0.3s;\\n        display: flex;\\n        align-items: center;\\n        justify-content: space-between;\\n        flex-direction: row;\\n      }\\n\\n      .list-item:hover {\\n        background-color: #e6f7ff;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\\n      }\\n\\n      .list-item .status-indicator {\\n        width: 15px;\\n        height: 15px;\\n        border-radius: 50%;\\n        margin-right: 10px;\\n      }\\n\\n      .list-item.active .status-indicator {\\n        background-color: green;\\n      }\\n\\n      .list-item.inactive .status-indicator {\\n        background-color: red;\\n      }\\n\\n      .modal {\\n        display: none;\\n        position: fixed;\\n        z-index: 1;\\n        left: 0;\\n        top: 0;\\n        width: 100%;\\n        height: 100%;\\n        overflow: auto;\\n        background-color: rgba(0, 0, 0, 0.5);\\n        justify-content: center;\\n        align-items: center;\\n        animation: fadeIn 0.5s ease-in-out;\\n      }\\n\\n      .modal-content {\\n        background-color: #fff;\\n        padding: 20px;\\n        border-radius: 15px;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n        width: 90%;\\n        max-width: 600px;\\n        text-align: center;\\n        animation: slideIn 0.5s ease-in-out;\\n      }\\n\\n      .close {\\n        color: #aaa;\\n        float: right;\\n        font-size: 28px;\\n        font-weight: bold;\\n        cursor: pointer;\\n      }\\n\\n      .close:hover,\\n      .close:focus {\\n        color: #000;\\n        text-decoration: none;\\n      }\\n\\n      .modal-body {\\n        margin-top: 20px;\\n        text-align: left;\\n        max-height: 400px;\\n        overflow-y: auto;\\n      }\\n\\n      .modal-body ul {\\n        list-style: none;\\n        padding: 0;\\n      }\\n\\n      .modal-body li {\\n        display: flex;\\n        align-items: center;\\n        margin-bottom: 10px;\\n      }\\n\\n      .modal-body label {\\n        margin-left: 10px;\\n      }\\n\\n      .modal-footer {\\n        margin-top: 20px;\\n        display: flex;\\n        justify-content: space-between;\\n      }\\n\\n      .modal-footer button {\\n        flex: 1;\\n        margin: 0 5px;\\n      }\\n\\n      .control-container {\\n        display: flex;\\n        align-items: center;\\n        justify-content: space-between;\\n        width: 124%;\\n      }\\n\\n      .apply-version-container {\\n        display: flex;\\n        align-items: center;\\n        gap: 10px;\\n        justify-content: center;\\n        margin-top: 20px;\\n      }\\n\\n      .apply-all-button {\\n        background-color: #28a745;\\n        align-self: flex-end;\\n      }\\n\\n      .apply-all-button:hover {\\n        background-color: #218838;\\n      }\\n\\n      @keyframes slideIn {\\n        from {\\n          transform: translateY(-20px);\\n        }\\n        to {\\n          transform: translateY(0);\\n        }\\n      }\\n\\n      .scroll-button {\\n        color: #000;\\n        border: none;\\n        cursor: pointer;\\n        padding: 10px;\\n        border-radius: 50%;\\n        transition:\\n          color 0.3s,\\n          box-shadow 0.3s;\\n        outline: none;\\n        position: absolute;\\n        right: 20px;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\\n        background: none;\\n        opacity: 0.6;\\n      }\\n\\n      .scroll-button.bottom {\\n        bottom: 20px;\\n      }\\n\\n      .scroll-button.top {\\n        top: 60px;\\n      }\\n\\n      .scroll-button img {\\n        width: 25px;\\n        height: 25px;\\n      }\\n\\n      .apply-icon-button {\\n        background: none;\\n        border: none;\\n        cursor: pointer;\\n        padding: 5px;\\n        outline: none;\\n      }\\n\\n      .apply-icon-button img {\\n        width: 25px;\\n        height: 25px;\\n      }\\n\\n      .back-icon-button {\\n        background: none;\\n        border: none;\\n        cursor: pointer;\\n        padding: 5px;\\n        outline: none;\\n      }\\n\\n      .back-icon-button img {\\n        width: 25px;\\n        height: 25px;\\n      }\\n\\n      .search-input {\\n        flex: 1;\\n        text-align: center;\\n        font-size: 18px;\\n      }\\n\\n      .header-title {\\n        font-size: 24px;\\n        font-weight: 700;\\n        text-align: center;\\n        margin-bottom: 20px;\\n      }\\n\\n      .switch {\\n        position: relative;\\n        display: inline-block;\\n        width: 60px;\\n        height: 34px;\\n      }\\n\\n      .switch input {\\n        opacity: 0;\\n        width: 0;\\n        height: 0;\\n      }\\n\\n      .slider {\\n        position: absolute;\\n        cursor: pointer;\\n        top: 0;\\n        left: 0;\\n        right: 0;\\n        bottom: 0;\\n        background-color: #ccc;\\n        transition: 0.4s;\\n        border-radius: 34px;\\n      }\\n\\n      .slider:before {\\n        position: absolute;\\n        content: \\'\\';\\n        height: 26px;\\n        width: 26px;\\n        left: 4px;\\n        bottom: 4px;\\n        background-color: white;\\n        transition: 0.4s;\\n        border-radius: 50%;\\n      }\\n\\n      .hidden {\\n        display: none;\\n      }\\n\\n      input:checked + .slider {\\n        background-color: #007bff;\\n      }\\n\\n      input:checked + .slider:before {\\n        transform: translateX(26px);\\n      }\\n\\n      #observabilityButton {\\n        background-color: red;\\n        color: white;\\n        font-weight: 500;\\n      }\\n    </style>\\n    <script>\\n      document.addEventListener(\\'DOMContentLoaded\\', function () {\\n        const authToken = sessionStorage.getItem(\\'authToken\\');\\n        const searchValue = sessionStorage.getItem(\\'searchValue\\') || \\'\\';\\n        const versionFilter = sessionStorage.getItem(\\'versionFilter\\') || \\'\\';\\n        if (authToken) {\\n          loadEndpoints(authToken, searchValue, versionFilter);\\n        } else {\\n          showLoginForm();\\n        }\\n\\n        document\\n          .getElementById(\\'search-unit\\')\\n          .addEventListener(\\'input\\', filterUnitsByDescription);\\n        document\\n          .getElementById(\\'version-filter\\')\\n          .addEventListener(\\'input\\', filterUnitsByVersion);\\n      });\\n\\n      function checkLoginStatus() {\\n        const button = document.getElementById(\\'logoutButton\\');\\n        const observabilityButton = document.getElementById(\\n          \\'observabilityButton\\',\\n        );\\n        if (isLogged()) {\\n          button.classList.remove(\\'hidden\\');\\n          observabilityButton.classList.remove(\\'hidden\\');\\n        } else {\\n          button.classList.add(\\'hidden\\');\\n          observabilityButton.classList.add(\\'hidden\\');\\n        }\\n      }\\n\\n      function logout() {\\n        console.log(\\'User logged out\\');\\n      }\\n\\n      window.onload = checkLoginStatus;\\n\\n      async function login(event) {\\n        event.preventDefault();\\n        const email = document.getElementById(\\'email\\').value;\\n        const password = document.getElementById(\\'password\\').value;\\n        const loginUrl = `${window.location.origin}/api/v1/security/login`;\\n\\n        const response = await fetch(loginUrl, {\\n          method: \\'POST\\',\\n          headers: {\\n            \\'Content-Type\\': \\'application/json\\',\\n            Accept: \\'application/json\\',\\n          },\\n          body: JSON.stringify({ email, password }),\\n        });\\n\\n        if (response.ok) {\\n          const data = await response.json();\\n          sessionStorage.setItem(\\'authToken\\', data.access_token);\\n          checkLoginStatus();\\n          loadEndpoints(data.access_token, \\'\\');\\n        } else {\\n          showErrorModal(\\'Login falhou. Verifique suas credenciais.\\');\\n        }\\n      }\\n\\n      function showLoginForm() {\\n        const loginForm = document.getElementById(\\'login-form\\');\\n        if (loginForm) loginForm.style.display = \\'block\\';\\n        const editorForm = document.getElementById(\\'editor-form\\');\\n        if (editorForm) editorForm.style.display = \\'none\\';\\n      }\\n\\n      function showErrorModal(message) {\\n        const modal = document.getElementById(\\'error-modal\\');\\n        const modalContent = document.getElementById(\\'modal-message\\');\\n        if (modalContent) modalContent.innerText = message;\\n        if (modal) modal.style.display = \\'flex\\';\\n      }\\n\\n      function closeModal() {\\n        const errorModal = document.getElementById(\\'error-modal\\');\\n        const applyAllModal = document.getElementById(\\'apply-all-modal\\');\\n        const toggleStatusModal = document.getElementById(\\n          \\'toggle-status-modal\\',\\n        );\\n        if (errorModal) errorModal.style.display = \\'none\\';\\n        if (applyAllModal) applyAllModal.style.display = \\'none\\';\\n        if (toggleStatusModal) toggleStatusModal.style.display = \\'none\\';\\n        reloadEndpoints();\\n      }\\n\\n      async function fetchData(url, authToken) {\\n        const response = await fetch(url, {\\n          headers: {\\n            Authorization: `Bearer ${authToken}`,\\n          },\\n        });\\n\\n        if (response.status === 401) {\\n          sessionStorage.removeItem(\\'authToken\\');\\n          showLoginForm();\\n          throw new Error(\\'Token inválido. Por favor, faça login novamente.\\');\\n        }\\n\\n        if (!response.ok) {\\n          const errorData = await response.json();\\n          showErrorModal(`Erro: ${errorData.message}`);\\n          throw new Error(errorData.message);\\n        }\\n\\n        return await response.json();\\n      }\\n\\n      async function loadEndpoints(\\n        authToken,\\n        searchValue = \\'\\',\\n        versionFilter = \\'\\',\\n      ) {\\n        try {\\n          const endpointConfigUrl = `${window.location.origin}/api/v1/endpoint-versioning-config`;\\n          const endpointConfigData = await fetchData(\\n            endpointConfigUrl,\\n            authToken,\\n          );\\n          const { config, data } = endpointConfigData;\\n          data.forEach((unit) => {\\n            unit.version = unit.version || \\'v1\\';\\n          });\\n          sessionStorage.setItem(\\'units\\', JSON.stringify(data));\\n          sessionStorage.setItem(\\'config\\', JSON.stringify(config));\\n          sessionStorage.setItem(\\'searchValue\\', searchValue);\\n          sessionStorage.setItem(\\'versionFilter\\', versionFilter);\\n          populateEndpointList(config);\\n          if (searchValue || versionFilter) {\\n            document.getElementById(\\'search-unit\\').value = searchValue;\\n            document.getElementById(\\'version-filter\\').value = versionFilter;\\n            filterUnitsByDescription();\\n            filterUnitsByVersion();\\n          }\\n          const loginForm = document.getElementById(\\'login-form\\');\\n          if (loginForm) {\\n            loginForm.style.display = \\'none\\';\\n            checkLoginStatus();\\n          }\\n\\n          const editorForm = document.getElementById(\\'editor-form\\');\\n          if (editorForm) editorForm.style.display = \\'block\\';\\n        } catch (error) {\\n          showErrorModal(error.message);\\n        }\\n      }\\n\\n      function sortJson(data) {\\n        return data.sort((a, b) => {\\n          const versionsDiff = b.versions.length - a.versions.length;\\n          if (versionsDiff !== 0) {\\n            return versionsDiff;\\n          }\\n\\n          const unitsDiff =\\n            Object.keys(b.units).length - Object.keys(a.units).length;\\n          if (unitsDiff !== 0) {\\n            return unitsDiff;\\n          }\\n\\n          return a.endpoint.localeCompare(b.endpoint);\\n        });\\n      }\\n\\n      function populateEndpointList(config) {\\n        const endpointList = document.getElementById(\\'endpoint-list\\');\\n        if (!endpointList) return;\\n        endpointList.innerHTML = \\'\\';\\n\\n        const orderedConfig = sortJson(config);\\n\\n        orderedConfig.forEach((endpointConfig) => {\\n          console.log(endpointConfig);\\n          const div = document.createElement(\\'div\\');\\n          div.className = `list-item ${endpointConfig.isDisabled ? \\'inactive\\' : \\'active\\'}`;\\n          div.innerHTML = `\\n                    <div style=\"display: flex\">\\n                      <span class=\"status-indicator\"></span>\\n                      <p style=\"margin-left: 20px\">Versões disponíveis \\n                        <p style=\"margin-left: 10px;color: gray; font-wheight: bold\">[ ${endpointConfig.versions} ] <span style=\"${endpointConfig?.versions?.length > 1 ? \\'color: black; font-wheight: bold\\' : \\'\\'}\">${endpointConfig?.versions?.length > 1 ? \\'- Refatorado -\\' : \\'\\'} <span style=\"${endpointConfig.isDisabled ? \\'color: red\\' : \\'color: green\\'}; font-wheight: bold\">${endpointConfig.isDisabled ? \\'Desligado\\' : \\'Ligado\\'}</span></span></p>\\n                        \\n                      </p>\\n                    </div>\\n                    ${endpointConfig.endpoint}\\n                    <label class=\"switch\">\\n                        <input type=\"checkbox\" ${endpointConfig.isDisabled ? \\'\\' : \\'checked\\'} onclick=\"confirmToggleStatus(event, \\'${endpointConfig.endpoint}\\', this)\">\\n                        <span class=\"slider\"></span>\\n                    </label>\\n                `;\\n          div.onclick = (e) => {\\n            if (!e.target.closest(\\'input\\')) {\\n              showEndpointDetails(endpointConfig);\\n            }\\n          };\\n          endpointList.appendChild(div);\\n        });\\n      }\\n\\n      function confirmToggleStatus(event, endpoint, checkbox) {\\n        event.stopPropagation();\\n        const initialState = checkbox.checked;\\n        const modal = document.getElementById(\\'toggle-status-modal\\');\\n        const modalContent = document.getElementById(\\n          \\'toggle-status-modal-content\\',\\n        );\\n        if (modalContent)\\n          modalContent.innerHTML = `\\n                <p>Você tem certeza que deseja ${checkbox.checked ? \\'ativar\\' : \\'desativar\\'} o endpoint ${endpoint}?</p>\\n                <div class=\"modal-footer\">\\n                    <button onclick=\"toggleStatus(\\'${endpoint}\\', ${checkbox.checked}, ${initialState})\">Continuar</button>\\n                    <button onclick=\"cancelToggleStatus(\\'${endpoint}\\', ${initialState}, this)\">Cancelar</button>\\n                </div>`;\\n        if (modal) modal.style.display = \\'flex\\';\\n      }\\n\\n      async function toggleStatus(endpoint, status, initialState) {\\n        const authToken = sessionStorage.getItem(\\'authToken\\');\\n        const apiUrl = `${window.location.origin}/api/v1/endpoint-versioning-config`;\\n        const config = JSON.parse(sessionStorage.getItem(\\'config\\'));\\n        const endpointConfig = config.find((cfg) => cfg.endpoint === endpoint);\\n        if (!endpointConfig) return;\\n\\n        endpointConfig.isDisabled = !status;\\n\\n        const response = await fetch(apiUrl, {\\n          method: \\'PUT\\',\\n          headers: {\\n            \\'Content-Type\\': \\'application/json\\',\\n            Authorization: `Bearer ${authToken}`,\\n          },\\n          body: JSON.stringify(endpointConfig),\\n        });\\n\\n        if (response.ok) {\\n          const updatedData = await response.json();\\n          sessionStorage.setItem(\\'config\\', JSON.stringify(updatedData));\\n          populateEndpointList(updatedData);\\n          closeModal();\\n        } else {\\n          const errorData = await response.json();\\n          showErrorModal(`Erro ao atualizar JSON: ${errorData.message}`);\\n          const checkbox = document.querySelector(\\n            `input[onclick*=\"${endpoint}\"]`,\\n          );\\n          if (checkbox) {\\n            checkbox.checked = initialState;\\n          }\\n        }\\n      }\\n\\n      function cancelToggleStatus(endpoint, initialState, button) {\\n        const modal = document.getElementById(\\'toggle-status-modal\\');\\n        if (modal) modal.style.display = \\'none\\';\\n\\n        const checkbox = document.querySelector(\\n          `input[onclick*=\"${endpoint}\"]`,\\n        );\\n        if (checkbox) {\\n          checkbox.checked = initialState;\\n        }\\n        reloadEndpoints();\\n      }\\n\\n      async function reloadEndpoints() {\\n        const authToken = sessionStorage.getItem(\\'authToken\\');\\n        const searchValue = sessionStorage.getItem(\\'searchValue\\') || \\'\\';\\n        const versionFilter = sessionStorage.getItem(\\'versionFilter\\') || \\'\\';\\n        if (authToken) {\\n          loadEndpoints(authToken, searchValue, versionFilter);\\n        }\\n      }\\n\\n      function showEndpointDetails(endpointConfig) {\\n        const endpointList = document.getElementById(\\'endpoint-list\\');\\n        const endpointDetails = document.getElementById(\\'endpoint-details\\');\\n        if (endpointList) endpointList.style.display = \\'none\\';\\n        if (endpointDetails) endpointDetails.style.display = \\'block\\';\\n        const endpointName = document.getElementById(\\'endpoint-name\\');\\n        if (endpointName)\\n          endpointName.innerText = `Configuração para: ${endpointConfig.endpoint}`;\\n        sessionStorage.setItem(\\n          \\'currentEndpoint\\',\\n          JSON.stringify(endpointConfig),\\n        );\\n        populateConfigTable(endpointConfig);\\n      }\\n\\n      function populateConfigTable(endpointConfig) {\\n        const tableBody = document.getElementById(\\'config-table-body\\');\\n        if (!tableBody) return;\\n        tableBody.innerHTML = \\'\\';\\n\\n        const controlContainer = document.querySelector(\\'.control-container\\');\\n        if (controlContainer) controlContainer.remove();\\n\\n        const units = JSON.parse(sessionStorage.getItem(\\'units\\'));\\n        units.forEach((unit) => {\\n          const tr = document.createElement(\\'tr\\');\\n          const tdUnit = document.createElement(\\'td\\');\\n          const tdVersion = document.createElement(\\'td\\');\\n\\n          tdUnit.innerText = unit.descricao;\\n          const versionSelect = document.createElement(\\'select\\');\\n          endpointConfig.versions.forEach((version) => {\\n            const option = document.createElement(\\'option\\');\\n            option.value = version;\\n            option.innerText = version;\\n            versionSelect.appendChild(option);\\n          });\\n\\n          versionSelect.value = endpointConfig.units[unit.id] || \\'v1\\';\\n          tdVersion.appendChild(versionSelect);\\n\\n          tr.appendChild(tdUnit);\\n          tr.appendChild(tdVersion);\\n          tableBody.appendChild(tr);\\n        });\\n\\n        const controlContainerNew = document.createElement(\\'div\\');\\n        controlContainerNew.className = \\'control-container\\';\\n\\n        const versionSelect = document.createElement(\\'select\\');\\n        endpointConfig.versions.forEach((version) => {\\n          const option = document.createElement(\\'option\\');\\n          option.value = version;\\n          option.innerText = version;\\n          versionSelect.appendChild(option);\\n        });\\n        versionSelect.id = \\'version-select\\';\\n\\n        const applyVersionButton = document.createElement(\\'button\\');\\n        applyVersionButton.className = \\'apply-icon-button\\';\\n        applyVersionButton.innerHTML =\\n          \\'<img src=\"https://static-00.iconduck.com/assets.00/change-icon-2048x1955-gw0ovgy9.png\"/>\\';\\n        applyVersionButton.onclick = () =>\\n          applyVersionToAll(versionSelect.value);\\n\\n        const applyButton = document.createElement(\\'button\\');\\n        applyButton.className = \\'apply-all-button\\';\\n        applyButton.innerText = \\'Atualizar\\';\\n        applyButton.onclick = () => showApplyAllModal(versionSelect.value);\\n\\n        controlContainerNew.appendChild(versionSelect);\\n        controlContainerNew.appendChild(applyVersionButton);\\n        controlContainerNew.appendChild(applyButton);\\n        tableBody.parentElement.appendChild(controlContainerNew);\\n      }\\n\\n      function applyVersionToAll(selectedVersion) {\\n        const tableBody = document.getElementById(\\'config-table-body\\');\\n        if (!tableBody) return;\\n\\n        for (const row of tableBody.rows) {\\n          const versionSelect = row.cells[1].querySelector(\\'select\\');\\n          versionSelect.value = selectedVersion;\\n        }\\n      }\\n\\n      function logout() {\\n        sessionStorage.clear();\\n        window.location.reload();\\n      }\\n\\n      function isLogged() {\\n        const authToken = sessionStorage.getItem(\\'authToken\\');\\n        if (authToken) return true;\\n        return false;\\n      }\\n\\n      function filterUnitsByDescription() {\\n        const searchValue = document\\n          .getElementById(\\'search-unit\\')\\n          .value.toLowerCase();\\n        sessionStorage.setItem(\\'searchValue\\', searchValue);\\n        const endpointConfig = JSON.parse(\\n          sessionStorage.getItem(\\'currentEndpoint\\'),\\n        );\\n        const units = JSON.parse(sessionStorage.getItem(\\'units\\'));\\n        const filteredUnits = units.filter((unit) =>\\n          unit.descricao.toLowerCase().includes(searchValue),\\n        );\\n\\n        if (endpointConfig) {\\n          populateConfigTableWithUnits(endpointConfig, filteredUnits);\\n        }\\n      }\\n\\n      function filterUnitsByVersion() {\\n        const versionFilter = document\\n          .getElementById(\\'version-filter\\')\\n          .value.toLowerCase();\\n        sessionStorage.setItem(\\'versionFilter\\', versionFilter);\\n        const endpointConfig = JSON.parse(\\n          sessionStorage.getItem(\\'currentEndpoint\\'),\\n        );\\n        const units = JSON.parse(sessionStorage.getItem(\\'units\\'));\\n        const filteredUnits = units.filter(\\n          (unit) =>\\n            versionFilter === \\'\\' ||\\n            endpointConfig.units[unit.id]?.toLowerCase() === versionFilter,\\n        );\\n\\n        if (endpointConfig) {\\n          populateConfigTableWithUnits(endpointConfig, filteredUnits);\\n        }\\n      }\\n\\n      function populateConfigTableWithUnits(endpointConfig, units) {\\n        const tableBody = document.getElementById(\\'config-table-body\\');\\n        if (!tableBody) return;\\n        tableBody.innerHTML = \\'\\';\\n\\n        units.forEach((unit) => {\\n          const tr = document.createElement(\\'tr\\');\\n          const tdUnit = document.createElement(\\'td\\');\\n          const tdVersion = document.createElement(\\'td\\');\\n\\n          tdUnit.innerText = unit.descricao;\\n          const versionSelect = document.createElement(\\'select\\');\\n          endpointConfig.versions.forEach((version) => {\\n            const option = document.createElement(\\'option\\');\\n            option.value = version;\\n            option.innerText = version;\\n            versionSelect.appendChild(option);\\n          });\\n\\n          versionSelect.value = endpointConfig.units[unit.id] || \\'v1\\';\\n          tdVersion.appendChild(versionSelect);\\n\\n          tr.appendChild(tdUnit);\\n          tr.appendChild(tdVersion);\\n          tableBody.appendChild(tr);\\n        });\\n      }\\n\\n      function showApplyAllModal(selectedVersion) {\\n        const endpointConfig = JSON.parse(\\n          sessionStorage.getItem(\\'currentEndpoint\\'),\\n        );\\n        const filteredUnits = Array.from(\\n          document.getElementById(\\'config-table-body\\').rows,\\n        ).map((row) => {\\n          const unitDescricao = row.cells[0].innerText;\\n          const unit = JSON.parse(sessionStorage.getItem(\\'units\\')).find(\\n            (u) => u.descricao === unitDescricao,\\n          );\\n          return { ...unit, selectedVersion };\\n        });\\n\\n        const affectedUnits = filteredUnits.filter(\\n          (unit) => unit.selectedVersion !== unit.selectedVersion,\\n        );\\n\\n        const modal = document.getElementById(\\'apply-all-modal\\');\\n        const modalContent = document.getElementById(\\'apply-all-modal-content\\');\\n        if (modalContent)\\n          modalContent.innerHTML = `\\n                <p>As seguintes unidades terão suas versões atualizadas para ${selectedVersion}:</p>\\n                <div class=\"modal-body\">\\n                    <ul>\\n                        ${filteredUnits\\n                          .map(\\n                            (unit) => `\\n                            <li>\\n                                <input type=\"checkbox\" id=\"unit-${unit.id}\" name=\"units\" value=\"${unit.id}\" checked>\\n                                <label for=\"unit-${unit.id}\">${unit.descricao}</label>\\n                            </li>\\n                        `,\\n                          )\\n                          .join(\\'\\')}\\n                    </ul>\\n                </div>\\n                <div class=\"modal-footer\">\\n                    <button onclick=\"applyVersionToSelected(\\'${selectedVersion}\\')\">Continuar</button>\\n                    <button onclick=\"closeModal()\">Cancelar</button>\\n                </div>`;\\n        if (modal) modal.style.display = \\'flex\\';\\n      }\\n\\n      function applyVersionToSelected(version) {\\n        const checkboxes = document.querySelectorAll(\\n          \\'input[name=\"units\"]:checked\\',\\n        );\\n        const tableBody = document.getElementById(\\'config-table-body\\');\\n        if (!tableBody) return;\\n\\n        const selectedUnits = Array.from(checkboxes).map(\\n          (checkbox) => checkbox.value,\\n        );\\n\\n        const unitsToUpdate = {};\\n        selectedUnits.forEach((unitId) => {\\n          for (const row of tableBody.rows) {\\n            const unitDescription = row.cells[0].innerText;\\n            const unit = JSON.parse(sessionStorage.getItem(\\'units\\')).find(\\n              (u) => u.id.toString() === unitId,\\n            );\\n            if (unit && unit.descricao === unitDescription) {\\n              const versionSelect = row.cells[1].querySelector(\\'select\\');\\n              unitsToUpdate[unit.id] = versionSelect.value;\\n            }\\n          }\\n        });\\n\\n        closeModal();\\n        updateJson(unitsToUpdate);\\n      }\\n\\n      async function updateJson(unitsToUpdate) {\\n        const apiUrl = `${window.location.origin}/api/v1/endpoint-versioning-config`;\\n        const authToken = sessionStorage.getItem(\\'authToken\\');\\n        const tableBody = document.getElementById(\\'config-table-body\\');\\n        if (!tableBody) return;\\n        const endpoint = document\\n          .getElementById(\\'endpoint-name\\')\\n          .innerText.split(\\': \\')[1];\\n        const updatedConfig = {\\n          endpoint,\\n          versions: [],\\n          units: unitsToUpdate,\\n        };\\n\\n        Object.values(unitsToUpdate).forEach((version) => {\\n          if (!updatedConfig.versions.includes(version)) {\\n            updatedConfig.versions.push(version);\\n          }\\n        });\\n\\n        const response = await fetch(apiUrl, {\\n          method: \\'PUT\\',\\n          headers: {\\n            \\'Content-Type\\': \\'application/json\\',\\n            Authorization: `Bearer ${authToken}`,\\n          },\\n          body: JSON.stringify(updatedConfig),\\n        });\\n\\n        if (response.ok) {\\n          const updatedData = await response.json();\\n          sessionStorage.setItem(\\'config\\', JSON.stringify(updatedData));\\n          populateEndpointList(updatedData);\\n          const currentEndpoint = JSON.parse(\\n            sessionStorage.getItem(\\'currentEndpoint\\'),\\n          );\\n          const updatedEndpointConfig = updatedData.find(\\n            (config) => config.endpoint === currentEndpoint?.endpoint,\\n          );\\n          if (updatedEndpointConfig) {\\n            showEndpointDetails(updatedEndpointConfig);\\n          }\\n          alert(\\'JSON atualizado com sucesso!\\');\\n        } else {\\n          const errorData = await response.json();\\n          showErrorModal(`Erro ao atualizar JSON: ${errorData.message}`);\\n        }\\n      }\\n\\n      function backToEndpointList() {\\n        const endpointList = document.getElementById(\\'endpoint-list\\');\\n        const endpointDetails = document.getElementById(\\'endpoint-details\\');\\n        if (endpointList) endpointList.style.display = \\'block\\';\\n        if (endpointDetails) endpointDetails.style.display = \\'none\\';\\n        reloadEndpoints();\\n      }\\n\\n      function scrollToBottom() {\\n        document.querySelector(\\'.scrollable-box\\').scrollTo({\\n          top: document.querySelector(\\'.scrollable-box\\').scrollHeight,\\n          behavior: \\'smooth\\',\\n        });\\n      }\\n\\n      function scrollToTop() {\\n        document\\n          .querySelector(\\'.scrollable-box\\')\\n          .scrollTo({ top: 0, behavior: \\'smooth\\' });\\n      }\\n    </script>\\n  </head>\\n  <body>\\n    <div class=\"container\">\\n      <h1 class=\"header-title\">\\n        Amei API - Painel de Administração e Versionamento de Endpoints\\n      </h1>\\n      <div style=\"align-self: flex-end\">\\n        <button id=\"logoutButton\" onclick=\"logout()\" class=\"hidden\">\\n          Logout\\n        </button>\\n      </div>\\n\\n      <div style=\"align-self: flex-end\">\\n        <button\\n          id=\"observabilityButton\"\\n          onclick=\"goToObservability()\"\\n          class=\"hidden\"\\n        >\\n          Observabilidade\\n        </button>\\n      </div>\\n\\n      <!-- Formulário de Login -->\\n      <form id=\"login-form\" onsubmit=\"login(event)\">\\n        <div\\n          style=\"display: flex; align-items: center; justify-content: center\"\\n        >\\n          <div class=\"login-form\">\\n            <div\\n              style=\"\\n                display: flex;\\n                flex-direction: column;\\n                align-items: center;\\n                justify-content: center;\\n                margin-bottom: 30px;\\n              \"\\n            >\\n              <h4>Login</h4>\\n              <br />\\n              <h6>Mesmo login do Amei!</h6>\\n            </div>\\n            <div>\\n              <label for=\"email\">Email:</label>\\n              <input type=\"email\" id=\"email\" required />\\n            </div>\\n            <div>\\n              <label for=\"password\">Senha:</label>\\n              <input type=\"password\" id=\"password\" required />\\n            </div>\\n            <br />\\n            <button type=\"submit\">Login</button>\\n          </div>\\n        </div>\\n      </form>\\n\\n      <!-- Lista de Endpoints -->\\n      <div id=\"endpoint-list\" class=\"fixed-header\">\\n        <!-- Lista de endpoints será populada aqui -->\\n      </div>\\n\\n      <!-- Detalhes do Endpoint -->\\n      <div\\n        id=\"endpoint-details\"\\n        style=\"display: none; flex-direction: column; height: 100%\"\\n      >\\n        <div class=\"fixed-header\">\\n          <button class=\"back-icon-button\" onclick=\"backToEndpointList()\">\\n            <img\\n              src=\"https://img.icons8.com/material-outlined/24/000000/left.png\"\\n            />\\n          </button>\\n          <h2 id=\"endpoint-name\"></h2>\\n          <label for=\"search-unit\" style=\"flex-grow: 1\"></label>\\n          <input\\n            type=\"text\"\\n            id=\"search-unit\"\\n            class=\"search-input\"\\n            placeholder=\"Digite o nome da unidade...\"\\n          />\\n          <input\\n            type=\"text\"\\n            id=\"version-filter\"\\n            class=\"search-input\"\\n            placeholder=\"Digite a versão...\"\\n          />\\n          <button class=\"scroll-button top\" onclick=\"scrollToBottom()\">\\n            <img\\n              src=\"https://img.icons8.com/material-outlined/24/000000/down.png\"\\n            />\\n          </button>\\n        </div>\\n        <div class=\"scrollable-box\">\\n          <table>\\n            <thead>\\n              <tr>\\n                <th>Unidade</th>\\n                <th>Versão</th>\\n              </tr>\\n            </thead>\\n            <tbody id=\"config-table-body\">\\n              <!-- Conteúdo gerado dinamicamente -->\\n            </tbody>\\n          </table>\\n        </div>\\n        <div class=\"control-container\">\\n          <select id=\"version-select\">\\n            <!-- Opções serão preenchidas dinamicamente -->\\n          </select>\\n          <button\\n            class=\"apply-icon-button\"\\n            onclick=\"applyVersionToAll(document.getElementById(\\'version-select\\').value)\"\\n          >\\n            <img\\n              src=\"https://static-00.iconduck.com/assets.00/change-icon-2048x1955-gw0ovgy9.png\"\\n            />\\n          </button>\\n          <button\\n            class=\"apply-all-button\"\\n            onclick=\"showApplyAllModal(document.getElementById(\\'version-select\\').value)\"\\n          >\\n            Atualizar\\n          </button>\\n        </div>\\n        <button class=\"scroll-button bottom\" onclick=\"scrollToTop()\">\\n          <img\\n            src=\"https://img.icons8.com/material-outlined/24/000000/up.png\"\\n          />\\n        </button>\\n      </div>\\n    </div>\\n\\n    <!-- Modal de Erro -->\\n    <div id=\"error-modal\" class=\"modal\">\\n      <div class=\"modal-content\">\\n        <span class=\"close\" onclick=\"closeModal()\">&times;</span>\\n        <p id=\"modal-message\"></p>\\n      </div>\\n    </div>\\n\\n    <!-- Modal de Aplicar a Todas -->\\n    <div id=\"apply-all-modal\" class=\"modal\">\\n      <div id=\"apply-all-modal-content\" class=\"modal-content\">\\n        <!-- Conteúdo gerado dinamicamente -->\\n      </div>\\n    </div>\\n\\n    <!-- Modal de Confirmar Status -->\\n    <div id=\"toggle-status-modal\" class=\"modal\">\\n      <div id=\"toggle-status-modal-content\" class=\"modal-content\">\\n        <!-- Conteúdo gerado dinamicamente -->\\n      </div>\\n    </div>\\n    <script>\\n      function goToObservability() {\\n        window.location.href = \\'/api/v1/observability-interface\\';\\n      }\\n    </script>\\n  </body>\\n</html>\\n' to have property 'body'","trace":"AssertionError: expected '<!doctype html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n    <title>\\n      Amei API - Painel de Administração e Versionamento de Endpoints\\n    </title>\\n    <link\\n      href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap\"\\n      rel=\"stylesheet\"\\n    />\\n    <style>\\n      /* Reset básico de CSS */\\n      * {\\n        margin: 0;\\n        padding: 0;\\n        box-sizing: border-box;\\n      }\\n\\n      body {\\n        font-family: \\'Roboto\\', sans-serif;\\n        background-color: #f0f2f5;\\n        color: #333;\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        flex-direction: column;\\n        overflow: auto;\\n      }\\n\\n      .container {\\n        background-color: #fff;\\n        padding: 20px;\\n        border-radius: 15px;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\\n        max-width: 1200px;\\n        width: 100%;\\n        display: flex;\\n        flex-direction: column;\\n        animation: fadeIn 0.5s ease-in-out;\\n        overflow: auto;\\n      }\\n\\n      @keyframes fadeIn {\\n        from {\\n          opacity: 0;\\n          transform: translateY(10px);\\n        }\\n        to {\\n          opacity: 1;\\n          transform: translateY(0);\\n        }\\n      }\\n\\n      h1,\\n      h2 {\\n        margin-bottom: 20px;\\n        text-align: center;\\n      }\\n\\n      h1 {\\n        font-weight: 700;\\n        color: #007bff;\\n      }\\n\\n      form,\\n      .editor {\\n        display: flex;\\n        flex-direction: column;\\n      }\\n\\n      label {\\n        margin-top: 10px;\\n      }\\n\\n      input,\\n      select,\\n      textarea,\\n      button {\\n        padding: 10px;\\n        margin-top: 5px;\\n        border: 1px solid #ccc;\\n        border-radius: 5px;\\n        font-size: 16px;\\n        outline: none;\\n      }\\n\\n      button {\\n        background-color: #007bff;\\n        color: #fff;\\n        border: none;\\n        cursor: pointer;\\n        margin-top: 20px;\\n        transition:\\n          background-color 0.3s,\\n          box-shadow 0.3s;\\n        outline: none;\\n      }\\n\\n      button:hover {\\n        background-color: #0056b3;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n      }\\n\\n      .fixed-header {\\n        flex-shrink: 0;\\n        background-color: #fff;\\n        z-index: 1;\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: space-between;\\n        padding: 10px 0;\\n      }\\n\\n      .login-form {\\n        box-shadow: rgba(17, 12, 46, 0.15) 0px 48px 100px 0px;\\n        border-radius: 8px;\\n        padding: 35px;\\n        display: flex;\\n        flex-direction: column;\\n        align-items: center;\\n        justify-content: center;\\n        margin: 17%;\\n      }\\n\\n      .scrollable-box {\\n        overflow-y: auto;\\n        border-radius: 5px;\\n        padding: 20px;\\n        background-color: #fff;\\n        height: calc(87vh - 200px);\\n      }\\n\\n      table {\\n        width: 100%;\\n        border-collapse: collapse;\\n      }\\n\\n      th,\\n      td {\\n        padding: 10px;\\n        border: 1px solid #ccc;\\n        text-align: left;\\n      }\\n\\n      th {\\n        background-color: #e9ecef;\\n      }\\n\\n      .list-item {\\n        padding: 10px;\\n        border: 1px solid #ccc;\\n        border-radius: 5px;\\n        margin-top: 5px;\\n        cursor: pointer;\\n        transition:\\n          background-color 0.3s,\\n          box-shadow 0.3s;\\n        display: flex;\\n        align-items: center;\\n        justify-content: space-between;\\n        flex-direction: row;\\n      }\\n\\n      .list-item:hover {\\n        background-color: #e6f7ff;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\\n      }\\n\\n      .list-item .status-indicator {\\n        width: 15px;\\n        height: 15px;\\n        border-radius: 50%;\\n        margin-right: 10px;\\n      }\\n\\n      .list-item.active .status-indicator {\\n        background-color: green;\\n      }\\n\\n      .list-item.inactive .status-indicator {\\n        background-color: red;\\n      }\\n\\n      .modal {\\n        display: none;\\n        position: fixed;\\n        z-index: 1;\\n        left: 0;\\n        top: 0;\\n        width: 100%;\\n        height: 100%;\\n        overflow: auto;\\n        background-color: rgba(0, 0, 0, 0.5);\\n        justify-content: center;\\n        align-items: center;\\n        animation: fadeIn 0.5s ease-in-out;\\n      }\\n\\n      .modal-content {\\n        background-color: #fff;\\n        padding: 20px;\\n        border-radius: 15px;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n        width: 90%;\\n        max-width: 600px;\\n        text-align: center;\\n        animation: slideIn 0.5s ease-in-out;\\n      }\\n\\n      .close {\\n        color: #aaa;\\n        float: right;\\n        font-size: 28px;\\n        font-weight: bold;\\n        cursor: pointer;\\n      }\\n\\n      .close:hover,\\n      .close:focus {\\n        color: #000;\\n        text-decoration: none;\\n      }\\n\\n      .modal-body {\\n        margin-top: 20px;\\n        text-align: left;\\n        max-height: 400px;\\n        overflow-y: auto;\\n      }\\n\\n      .modal-body ul {\\n        list-style: none;\\n        padding: 0;\\n      }\\n\\n      .modal-body li {\\n        display: flex;\\n        align-items: center;\\n        margin-bottom: 10px;\\n      }\\n\\n      .modal-body label {\\n        margin-left: 10px;\\n      }\\n\\n      .modal-footer {\\n        margin-top: 20px;\\n        display: flex;\\n        justify-content: space-between;\\n      }\\n\\n      .modal-footer button {\\n        flex: 1;\\n        margin: 0 5px;\\n      }\\n\\n      .control-container {\\n        display: flex;\\n        align-items: center;\\n        justify-content: space-between;\\n        width: 124%;\\n      }\\n\\n      .apply-version-container {\\n        display: flex;\\n        align-items: center;\\n        gap: 10px;\\n        justify-content: center;\\n        margin-top: 20px;\\n      }\\n\\n      .apply-all-button {\\n        background-color: #28a745;\\n        align-self: flex-end;\\n      }\\n\\n      .apply-all-button:hover {\\n        background-color: #218838;\\n      }\\n\\n      @keyframes slideIn {\\n        from {\\n          transform: translateY(-20px);\\n        }\\n        to {\\n          transform: translateY(0);\\n        }\\n      }\\n\\n      .scroll-button {\\n        color: #000;\\n        border: none;\\n        cursor: pointer;\\n        padding: 10px;\\n        border-radius: 50%;\\n        transition:\\n          color 0.3s,\\n          box-shadow 0.3s;\\n        outline: none;\\n        position: absolute;\\n        right: 20px;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\\n        background: none;\\n        opacity: 0.6;\\n      }\\n\\n      .scroll-button.bottom {\\n        bottom: 20px;\\n      }\\n\\n      .scroll-button.top {\\n        top: 60px;\\n      }\\n\\n      .scroll-button img {\\n        width: 25px;\\n        height: 25px;\\n      }\\n\\n      .apply-icon-button {\\n        background: none;\\n        border: none;\\n        cursor: pointer;\\n        padding: 5px;\\n        outline: none;\\n      }\\n\\n      .apply-icon-button img {\\n        width: 25px;\\n        height: 25px;\\n      }\\n\\n      .back-icon-button {\\n        background: none;\\n        border: none;\\n        cursor: pointer;\\n        padding: 5px;\\n        outline: none;\\n      }\\n\\n      .back-icon-button img {\\n        width: 25px;\\n        height: 25px;\\n      }\\n\\n      .search-input {\\n        flex: 1;\\n        text-align: center;\\n        font-size: 18px;\\n      }\\n\\n      .header-title {\\n        font-size: 24px;\\n        font-weight: 700;\\n        text-align: center;\\n        margin-bottom: 20px;\\n      }\\n\\n      .switch {\\n        position: relative;\\n        display: inline-block;\\n        width: 60px;\\n        height: 34px;\\n      }\\n\\n      .switch input {\\n        opacity: 0;\\n        width: 0;\\n        height: 0;\\n      }\\n\\n      .slider {\\n        position: absolute;\\n        cursor: pointer;\\n        top: 0;\\n        left: 0;\\n        right: 0;\\n        bottom: 0;\\n        background-color: #ccc;\\n        transition: 0.4s;\\n        border-radius: 34px;\\n      }\\n\\n      .slider:before {\\n        position: absolute;\\n        content: \\'\\';\\n        height: 26px;\\n        width: 26px;\\n        left: 4px;\\n        bottom: 4px;\\n        background-color: white;\\n        transition: 0.4s;\\n        border-radius: 50%;\\n      }\\n\\n      .hidden {\\n        display: none;\\n      }\\n\\n      input:checked + .slider {\\n        background-color: #007bff;\\n      }\\n\\n      input:checked + .slider:before {\\n        transform: translateX(26px);\\n      }\\n\\n      #observabilityButton {\\n        background-color: red;\\n        color: white;\\n        font-weight: 500;\\n      }\\n    </style>\\n    <script>\\n      document.addEventListener(\\'DOMContentLoaded\\', function () {\\n        const authToken = sessionStorage.getItem(\\'authToken\\');\\n        const searchValue = sessionStorage.getItem(\\'searchValue\\') || \\'\\';\\n        const versionFilter = sessionStorage.getItem(\\'versionFilter\\') || \\'\\';\\n        if (authToken) {\\n          loadEndpoints(authToken, searchValue, versionFilter);\\n        } else {\\n          showLoginForm();\\n        }\\n\\n        document\\n          .getElementById(\\'search-unit\\')\\n          .addEventListener(\\'input\\', filterUnitsByDescription);\\n        document\\n          .getElementById(\\'version-filter\\')\\n          .addEventListener(\\'input\\', filterUnitsByVersion);\\n      });\\n\\n      function checkLoginStatus() {\\n        const button = document.getElementById(\\'logoutButton\\');\\n        const observabilityButton = document.getElementById(\\n          \\'observabilityButton\\',\\n        );\\n        if (isLogged()) {\\n          button.classList.remove(\\'hidden\\');\\n          observabilityButton.classList.remove(\\'hidden\\');\\n        } else {\\n          button.classList.add(\\'hidden\\');\\n          observabilityButton.classList.add(\\'hidden\\');\\n        }\\n      }\\n\\n      function logout() {\\n        console.log(\\'User logged out\\');\\n      }\\n\\n      window.onload = checkLoginStatus;\\n\\n      async function login(event) {\\n        event.preventDefault();\\n        const email = document.getElementById(\\'email\\').value;\\n        const password = document.getElementById(\\'password\\').value;\\n        const loginUrl = `${window.location.origin}/api/v1/security/login`;\\n\\n        const response = await fetch(loginUrl, {\\n          method: \\'POST\\',\\n          headers: {\\n            \\'Content-Type\\': \\'application/json\\',\\n            Accept: \\'application/json\\',\\n          },\\n          body: JSON.stringify({ email, password }),\\n        });\\n\\n        if (response.ok) {\\n          const data = await response.json();\\n          sessionStorage.setItem(\\'authToken\\', data.access_token);\\n          checkLoginStatus();\\n          loadEndpoints(data.access_token, \\'\\');\\n        } else {\\n          showErrorModal(\\'Login falhou. Verifique suas credenciais.\\');\\n        }\\n      }\\n\\n      function showLoginForm() {\\n        const loginForm = document.getElementById(\\'login-form\\');\\n        if (loginForm) loginForm.style.display = \\'block\\';\\n        const editorForm = document.getElementById(\\'editor-form\\');\\n        if (editorForm) editorForm.style.display = \\'none\\';\\n      }\\n\\n      function showErrorModal(message) {\\n        const modal = document.getElementById(\\'error-modal\\');\\n        const modalContent = document.getElementById(\\'modal-message\\');\\n        if (modalContent) modalContent.innerText = message;\\n        if (modal) modal.style.display = \\'flex\\';\\n      }\\n\\n      function closeModal() {\\n        const errorModal = document.getElementById(\\'error-modal\\');\\n        const applyAllModal = document.getElementById(\\'apply-all-modal\\');\\n        const toggleStatusModal = document.getElementById(\\n          \\'toggle-status-modal\\',\\n        );\\n        if (errorModal) errorModal.style.display = \\'none\\';\\n        if (applyAllModal) applyAllModal.style.display = \\'none\\';\\n        if (toggleStatusModal) toggleStatusModal.style.display = \\'none\\';\\n        reloadEndpoints();\\n      }\\n\\n      async function fetchData(url, authToken) {\\n        const response = await fetch(url, {\\n          headers: {\\n            Authorization: `Bearer ${authToken}`,\\n          },\\n        });\\n\\n        if (response.status === 401) {\\n          sessionStorage.removeItem(\\'authToken\\');\\n          showLoginForm();\\n          throw new Error(\\'Token inválido. Por favor, faça login novamente.\\');\\n        }\\n\\n        if (!response.ok) {\\n          const errorData = await response.json();\\n          showErrorModal(`Erro: ${errorData.message}`);\\n          throw new Error(errorData.message);\\n        }\\n\\n        return await response.json();\\n      }\\n\\n      async function loadEndpoints(\\n        authToken,\\n        searchValue = \\'\\',\\n        versionFilter = \\'\\',\\n      ) {\\n        try {\\n          const endpointConfigUrl = `${window.location.origin}/api/v1/endpoint-versioning-config`;\\n          const endpointConfigData = await fetchData(\\n            endpointConfigUrl,\\n            authToken,\\n          );\\n          const { config, data } = endpointConfigData;\\n          data.forEach((unit) => {\\n            unit.version = unit.version || \\'v1\\';\\n          });\\n          sessionStorage.setItem(\\'units\\', JSON.stringify(data));\\n          sessionStorage.setItem(\\'config\\', JSON.stringify(config));\\n          sessionStorage.setItem(\\'searchValue\\', searchValue);\\n          sessionStorage.setItem(\\'versionFilter\\', versionFilter);\\n          populateEndpointList(config);\\n          if (searchValue || versionFilter) {\\n            document.getElementById(\\'search-unit\\').value = searchValue;\\n            document.getElementById(\\'version-filter\\').value = versionFilter;\\n            filterUnitsByDescription();\\n            filterUnitsByVersion();\\n          }\\n          const loginForm = document.getElementById(\\'login-form\\');\\n          if (loginForm) {\\n            loginForm.style.display = \\'none\\';\\n            checkLoginStatus();\\n          }\\n\\n          const editorForm = document.getElementById(\\'editor-form\\');\\n          if (editorForm) editorForm.style.display = \\'block\\';\\n        } catch (error) {\\n          showErrorModal(error.message);\\n        }\\n      }\\n\\n      function sortJson(data) {\\n        return data.sort((a, b) => {\\n          const versionsDiff = b.versions.length - a.versions.length;\\n          if (versionsDiff !== 0) {\\n            return versionsDiff;\\n          }\\n\\n          const unitsDiff =\\n            Object.keys(b.units).length - Object.keys(a.units).length;\\n          if (unitsDiff !== 0) {\\n            return unitsDiff;\\n          }\\n\\n          return a.endpoint.localeCompare(b.endpoint);\\n        });\\n      }\\n\\n      function populateEndpointList(config) {\\n        const endpointList = document.getElementById(\\'endpoint-list\\');\\n        if (!endpointList) return;\\n        endpointList.innerHTML = \\'\\';\\n\\n        const orderedConfig = sortJson(config);\\n\\n        orderedConfig.forEach((endpointConfig) => {\\n          console.log(endpointConfig);\\n          const div = document.createElement(\\'div\\');\\n          div.className = `list-item ${endpointConfig.isDisabled ? \\'inactive\\' : \\'active\\'}`;\\n          div.innerHTML = `\\n                    <div style=\"display: flex\">\\n                      <span class=\"status-indicator\"></span>\\n                      <p style=\"margin-left: 20px\">Versões disponíveis \\n                        <p style=\"margin-left: 10px;color: gray; font-wheight: bold\">[ ${endpointConfig.versions} ] <span style=\"${endpointConfig?.versions?.length > 1 ? \\'color: black; font-wheight: bold\\' : \\'\\'}\">${endpointConfig?.versions?.length > 1 ? \\'- Refatorado -\\' : \\'\\'} <span style=\"${endpointConfig.isDisabled ? \\'color: red\\' : \\'color: green\\'}; font-wheight: bold\">${endpointConfig.isDisabled ? \\'Desligado\\' : \\'Ligado\\'}</span></span></p>\\n                        \\n                      </p>\\n                    </div>\\n                    ${endpointConfig.endpoint}\\n                    <label class=\"switch\">\\n                        <input type=\"checkbox\" ${endpointConfig.isDisabled ? \\'\\' : \\'checked\\'} onclick=\"confirmToggleStatus(event, \\'${endpointConfig.endpoint}\\', this)\">\\n                        <span class=\"slider\"></span>\\n                    </label>\\n                `;\\n          div.onclick = (e) => {\\n            if (!e.target.closest(\\'input\\')) {\\n              showEndpointDetails(endpointConfig);\\n            }\\n          };\\n          endpointList.appendChild(div);\\n        });\\n      }\\n\\n      function confirmToggleStatus(event, endpoint, checkbox) {\\n        event.stopPropagation();\\n        const initialState = checkbox.checked;\\n        const modal = document.getElementById(\\'toggle-status-modal\\');\\n        const modalContent = document.getElementById(\\n          \\'toggle-status-modal-content\\',\\n        );\\n        if (modalContent)\\n          modalContent.innerHTML = `\\n                <p>Você tem certeza que deseja ${checkbox.checked ? \\'ativar\\' : \\'desativar\\'} o endpoint ${endpoint}?</p>\\n                <div class=\"modal-footer\">\\n                    <button onclick=\"toggleStatus(\\'${endpoint}\\', ${checkbox.checked}, ${initialState})\">Continuar</button>\\n                    <button onclick=\"cancelToggleStatus(\\'${endpoint}\\', ${initialState}, this)\">Cancelar</button>\\n                </div>`;\\n        if (modal) modal.style.display = \\'flex\\';\\n      }\\n\\n      async function toggleStatus(endpoint, status, initialState) {\\n        const authToken = sessionStorage.getItem(\\'authToken\\');\\n        const apiUrl = `${window.location.origin}/api/v1/endpoint-versioning-config`;\\n        const config = JSON.parse(sessionStorage.getItem(\\'config\\'));\\n        const endpointConfig = config.find((cfg) => cfg.endpoint === endpoint);\\n        if (!endpointConfig) return;\\n\\n        endpointConfig.isDisabled = !status;\\n\\n        const response = await fetch(apiUrl, {\\n          method: \\'PUT\\',\\n          headers: {\\n            \\'Content-Type\\': \\'application/json\\',\\n            Authorization: `Bearer ${authToken}`,\\n          },\\n          body: JSON.stringify(endpointConfig),\\n        });\\n\\n        if (response.ok) {\\n          const updatedData = await response.json();\\n          sessionStorage.setItem(\\'config\\', JSON.stringify(updatedData));\\n          populateEndpointList(updatedData);\\n          closeModal();\\n        } else {\\n          const errorData = await response.json();\\n          showErrorModal(`Erro ao atualizar JSON: ${errorData.message}`);\\n          const checkbox = document.querySelector(\\n            `input[onclick*=\"${endpoint}\"]`,\\n          );\\n          if (checkbox) {\\n            checkbox.checked = initialState;\\n          }\\n        }\\n      }\\n\\n      function cancelToggleStatus(endpoint, initialState, button) {\\n        const modal = document.getElementById(\\'toggle-status-modal\\');\\n        if (modal) modal.style.display = \\'none\\';\\n\\n        const checkbox = document.querySelector(\\n          `input[onclick*=\"${endpoint}\"]`,\\n        );\\n        if (checkbox) {\\n          checkbox.checked = initialState;\\n        }\\n        reloadEndpoints();\\n      }\\n\\n      async function reloadEndpoints() {\\n        const authToken = sessionStorage.getItem(\\'authToken\\');\\n        const searchValue = sessionStorage.getItem(\\'searchValue\\') || \\'\\';\\n        const versionFilter = sessionStorage.getItem(\\'versionFilter\\') || \\'\\';\\n        if (authToken) {\\n          loadEndpoints(authToken, searchValue, versionFilter);\\n        }\\n      }\\n\\n      function showEndpointDetails(endpointConfig) {\\n        const endpointList = document.getElementById(\\'endpoint-list\\');\\n        const endpointDetails = document.getElementById(\\'endpoint-details\\');\\n        if (endpointList) endpointList.style.display = \\'none\\';\\n        if (endpointDetails) endpointDetails.style.display = \\'block\\';\\n        const endpointName = document.getElementById(\\'endpoint-name\\');\\n        if (endpointName)\\n          endpointName.innerText = `Configuração para: ${endpointConfig.endpoint}`;\\n        sessionStorage.setItem(\\n          \\'currentEndpoint\\',\\n          JSON.stringify(endpointConfig),\\n        );\\n        populateConfigTable(endpointConfig);\\n      }\\n\\n      function populateConfigTable(endpointConfig) {\\n        const tableBody = document.getElementById(\\'config-table-body\\');\\n        if (!tableBody) return;\\n        tableBody.innerHTML = \\'\\';\\n\\n        const controlContainer = document.querySelector(\\'.control-container\\');\\n        if (controlContainer) controlContainer.remove();\\n\\n        const units = JSON.parse(sessionStorage.getItem(\\'units\\'));\\n        units.forEach((unit) => {\\n          const tr = document.createElement(\\'tr\\');\\n          const tdUnit = document.createElement(\\'td\\');\\n          const tdVersion = document.createElement(\\'td\\');\\n\\n          tdUnit.innerText = unit.descricao;\\n          const versionSelect = document.createElement(\\'select\\');\\n          endpointConfig.versions.forEach((version) => {\\n            const option = document.createElement(\\'option\\');\\n            option.value = version;\\n            option.innerText = version;\\n            versionSelect.appendChild(option);\\n          });\\n\\n          versionSelect.value = endpointConfig.units[unit.id] || \\'v1\\';\\n          tdVersion.appendChild(versionSelect);\\n\\n          tr.appendChild(tdUnit);\\n          tr.appendChild(tdVersion);\\n          tableBody.appendChild(tr);\\n        });\\n\\n        const controlContainerNew = document.createElement(\\'div\\');\\n        controlContainerNew.className = \\'control-container\\';\\n\\n        const versionSelect = document.createElement(\\'select\\');\\n        endpointConfig.versions.forEach((version) => {\\n          const option = document.createElement(\\'option\\');\\n          option.value = version;\\n          option.innerText = version;\\n          versionSelect.appendChild(option);\\n        });\\n        versionSelect.id = \\'version-select\\';\\n\\n        const applyVersionButton = document.createElement(\\'button\\');\\n        applyVersionButton.className = \\'apply-icon-button\\';\\n        applyVersionButton.innerHTML =\\n          \\'<img src=\"https://static-00.iconduck.com/assets.00/change-icon-2048x1955-gw0ovgy9.png\"/>\\';\\n        applyVersionButton.onclick = () =>\\n          applyVersionToAll(versionSelect.value);\\n\\n        const applyButton = document.createElement(\\'button\\');\\n        applyButton.className = \\'apply-all-button\\';\\n        applyButton.innerText = \\'Atualizar\\';\\n        applyButton.onclick = () => showApplyAllModal(versionSelect.value);\\n\\n        controlContainerNew.appendChild(versionSelect);\\n        controlContainerNew.appendChild(applyVersionButton);\\n        controlContainerNew.appendChild(applyButton);\\n        tableBody.parentElement.appendChild(controlContainerNew);\\n      }\\n\\n      function applyVersionToAll(selectedVersion) {\\n        const tableBody = document.getElementById(\\'config-table-body\\');\\n        if (!tableBody) return;\\n\\n        for (const row of tableBody.rows) {\\n          const versionSelect = row.cells[1].querySelector(\\'select\\');\\n          versionSelect.value = selectedVersion;\\n        }\\n      }\\n\\n      function logout() {\\n        sessionStorage.clear();\\n        window.location.reload();\\n      }\\n\\n      function isLogged() {\\n        const authToken = sessionStorage.getItem(\\'authToken\\');\\n        if (authToken) return true;\\n        return false;\\n      }\\n\\n      function filterUnitsByDescription() {\\n        const searchValue = document\\n          .getElementById(\\'search-unit\\')\\n          .value.toLowerCase();\\n        sessionStorage.setItem(\\'searchValue\\', searchValue);\\n        const endpointConfig = JSON.parse(\\n          sessionStorage.getItem(\\'currentEndpoint\\'),\\n        );\\n        const units = JSON.parse(sessionStorage.getItem(\\'units\\'));\\n        const filteredUnits = units.filter((unit) =>\\n          unit.descricao.toLowerCase().includes(searchValue),\\n        );\\n\\n        if (endpointConfig) {\\n          populateConfigTableWithUnits(endpointConfig, filteredUnits);\\n        }\\n      }\\n\\n      function filterUnitsByVersion() {\\n        const versionFilter = document\\n          .getElementById(\\'version-filter\\')\\n          .value.toLowerCase();\\n        sessionStorage.setItem(\\'versionFilter\\', versionFilter);\\n        const endpointConfig = JSON.parse(\\n          sessionStorage.getItem(\\'currentEndpoint\\'),\\n        );\\n        const units = JSON.parse(sessionStorage.getItem(\\'units\\'));\\n        const filteredUnits = units.filter(\\n          (unit) =>\\n            versionFilter === \\'\\' ||\\n            endpointConfig.units[unit.id]?.toLowerCase() === versionFilter,\\n        );\\n\\n        if (endpointConfig) {\\n          populateConfigTableWithUnits(endpointConfig, filteredUnits);\\n        }\\n      }\\n\\n      function populateConfigTableWithUnits(endpointConfig, units) {\\n        const tableBody = document.getElementById(\\'config-table-body\\');\\n        if (!tableBody) return;\\n        tableBody.innerHTML = \\'\\';\\n\\n        units.forEach((unit) => {\\n          const tr = document.createElement(\\'tr\\');\\n          const tdUnit = document.createElement(\\'td\\');\\n          const tdVersion = document.createElement(\\'td\\');\\n\\n          tdUnit.innerText = unit.descricao;\\n          const versionSelect = document.createElement(\\'select\\');\\n          endpointConfig.versions.forEach((version) => {\\n            const option = document.createElement(\\'option\\');\\n            option.value = version;\\n            option.innerText = version;\\n            versionSelect.appendChild(option);\\n          });\\n\\n          versionSelect.value = endpointConfig.units[unit.id] || \\'v1\\';\\n          tdVersion.appendChild(versionSelect);\\n\\n          tr.appendChild(tdUnit);\\n          tr.appendChild(tdVersion);\\n          tableBody.appendChild(tr);\\n        });\\n      }\\n\\n      function showApplyAllModal(selectedVersion) {\\n        const endpointConfig = JSON.parse(\\n          sessionStorage.getItem(\\'currentEndpoint\\'),\\n        );\\n        const filteredUnits = Array.from(\\n          document.getElementById(\\'config-table-body\\').rows,\\n        ).map((row) => {\\n          const unitDescricao = row.cells[0].innerText;\\n          const unit = JSON.parse(sessionStorage.getItem(\\'units\\')).find(\\n            (u) => u.descricao === unitDescricao,\\n          );\\n          return { ...unit, selectedVersion };\\n        });\\n\\n        const affectedUnits = filteredUnits.filter(\\n          (unit) => unit.selectedVersion !== unit.selectedVersion,\\n        );\\n\\n        const modal = document.getElementById(\\'apply-all-modal\\');\\n        const modalContent = document.getElementById(\\'apply-all-modal-content\\');\\n        if (modalContent)\\n          modalContent.innerHTML = `\\n                <p>As seguintes unidades terão suas versões atualizadas para ${selectedVersion}:</p>\\n                <div class=\"modal-body\">\\n                    <ul>\\n                        ${filteredUnits\\n                          .map(\\n                            (unit) => `\\n                            <li>\\n                                <input type=\"checkbox\" id=\"unit-${unit.id}\" name=\"units\" value=\"${unit.id}\" checked>\\n                                <label for=\"unit-${unit.id}\">${unit.descricao}</label>\\n                            </li>\\n                        `,\\n                          )\\n                          .join(\\'\\')}\\n                    </ul>\\n                </div>\\n                <div class=\"modal-footer\">\\n                    <button onclick=\"applyVersionToSelected(\\'${selectedVersion}\\')\">Continuar</button>\\n                    <button onclick=\"closeModal()\">Cancelar</button>\\n                </div>`;\\n        if (modal) modal.style.display = \\'flex\\';\\n      }\\n\\n      function applyVersionToSelected(version) {\\n        const checkboxes = document.querySelectorAll(\\n          \\'input[name=\"units\"]:checked\\',\\n        );\\n        const tableBody = document.getElementById(\\'config-table-body\\');\\n        if (!tableBody) return;\\n\\n        const selectedUnits = Array.from(checkboxes).map(\\n          (checkbox) => checkbox.value,\\n        );\\n\\n        const unitsToUpdate = {};\\n        selectedUnits.forEach((unitId) => {\\n          for (const row of tableBody.rows) {\\n            const unitDescription = row.cells[0].innerText;\\n            const unit = JSON.parse(sessionStorage.getItem(\\'units\\')).find(\\n              (u) => u.id.toString() === unitId,\\n            );\\n            if (unit && unit.descricao === unitDescription) {\\n              const versionSelect = row.cells[1].querySelector(\\'select\\');\\n              unitsToUpdate[unit.id] = versionSelect.value;\\n            }\\n          }\\n        });\\n\\n        closeModal();\\n        updateJson(unitsToUpdate);\\n      }\\n\\n      async function updateJson(unitsToUpdate) {\\n        const apiUrl = `${window.location.origin}/api/v1/endpoint-versioning-config`;\\n        const authToken = sessionStorage.getItem(\\'authToken\\');\\n        const tableBody = document.getElementById(\\'config-table-body\\');\\n        if (!tableBody) return;\\n        const endpoint = document\\n          .getElementById(\\'endpoint-name\\')\\n          .innerText.split(\\': \\')[1];\\n        const updatedConfig = {\\n          endpoint,\\n          versions: [],\\n          units: unitsToUpdate,\\n        };\\n\\n        Object.values(unitsToUpdate).forEach((version) => {\\n          if (!updatedConfig.versions.includes(version)) {\\n            updatedConfig.versions.push(version);\\n          }\\n        });\\n\\n        const response = await fetch(apiUrl, {\\n          method: \\'PUT\\',\\n          headers: {\\n            \\'Content-Type\\': \\'application/json\\',\\n            Authorization: `Bearer ${authToken}`,\\n          },\\n          body: JSON.stringify(updatedConfig),\\n        });\\n\\n        if (response.ok) {\\n          const updatedData = await response.json();\\n          sessionStorage.setItem(\\'config\\', JSON.stringify(updatedData));\\n          populateEndpointList(updatedData);\\n          const currentEndpoint = JSON.parse(\\n            sessionStorage.getItem(\\'currentEndpoint\\'),\\n          );\\n          const updatedEndpointConfig = updatedData.find(\\n            (config) => config.endpoint === currentEndpoint?.endpoint,\\n          );\\n          if (updatedEndpointConfig) {\\n            showEndpointDetails(updatedEndpointConfig);\\n          }\\n          alert(\\'JSON atualizado com sucesso!\\');\\n        } else {\\n          const errorData = await response.json();\\n          showErrorModal(`Erro ao atualizar JSON: ${errorData.message}`);\\n        }\\n      }\\n\\n      function backToEndpointList() {\\n        const endpointList = document.getElementById(\\'endpoint-list\\');\\n        const endpointDetails = document.getElementById(\\'endpoint-details\\');\\n        if (endpointList) endpointList.style.display = \\'block\\';\\n        if (endpointDetails) endpointDetails.style.display = \\'none\\';\\n        reloadEndpoints();\\n      }\\n\\n      function scrollToBottom() {\\n        document.querySelector(\\'.scrollable-box\\').scrollTo({\\n          top: document.querySelector(\\'.scrollable-box\\').scrollHeight,\\n          behavior: \\'smooth\\',\\n        });\\n      }\\n\\n      function scrollToTop() {\\n        document\\n          .querySelector(\\'.scrollable-box\\')\\n          .scrollTo({ top: 0, behavior: \\'smooth\\' });\\n      }\\n    </script>\\n  </head>\\n  <body>\\n    <div class=\"container\">\\n      <h1 class=\"header-title\">\\n        Amei API - Painel de Administração e Versionamento de Endpoints\\n      </h1>\\n      <div style=\"align-self: flex-end\">\\n        <button id=\"logoutButton\" onclick=\"logout()\" class=\"hidden\">\\n          Logout\\n        </button>\\n      </div>\\n\\n      <div style=\"align-self: flex-end\">\\n        <button\\n          id=\"observabilityButton\"\\n          onclick=\"goToObservability()\"\\n          class=\"hidden\"\\n        >\\n          Observabilidade\\n        </button>\\n      </div>\\n\\n      <!-- Formulário de Login -->\\n      <form id=\"login-form\" onsubmit=\"login(event)\">\\n        <div\\n          style=\"display: flex; align-items: center; justify-content: center\"\\n        >\\n          <div class=\"login-form\">\\n            <div\\n              style=\"\\n                display: flex;\\n                flex-direction: column;\\n                align-items: center;\\n                justify-content: center;\\n                margin-bottom: 30px;\\n              \"\\n            >\\n              <h4>Login</h4>\\n              <br />\\n              <h6>Mesmo login do Amei!</h6>\\n            </div>\\n            <div>\\n              <label for=\"email\">Email:</label>\\n              <input type=\"email\" id=\"email\" required />\\n            </div>\\n            <div>\\n              <label for=\"password\">Senha:</label>\\n              <input type=\"password\" id=\"password\" required />\\n            </div>\\n            <br />\\n            <button type=\"submit\">Login</button>\\n          </div>\\n        </div>\\n      </form>\\n\\n      <!-- Lista de Endpoints -->\\n      <div id=\"endpoint-list\" class=\"fixed-header\">\\n        <!-- Lista de endpoints será populada aqui -->\\n      </div>\\n\\n      <!-- Detalhes do Endpoint -->\\n      <div\\n        id=\"endpoint-details\"\\n        style=\"display: none; flex-direction: column; height: 100%\"\\n      >\\n        <div class=\"fixed-header\">\\n          <button class=\"back-icon-button\" onclick=\"backToEndpointList()\">\\n            <img\\n              src=\"https://img.icons8.com/material-outlined/24/000000/left.png\"\\n            />\\n          </button>\\n          <h2 id=\"endpoint-name\"></h2>\\n          <label for=\"search-unit\" style=\"flex-grow: 1\"></label>\\n          <input\\n            type=\"text\"\\n            id=\"search-unit\"\\n            class=\"search-input\"\\n            placeholder=\"Digite o nome da unidade...\"\\n          />\\n          <input\\n            type=\"text\"\\n            id=\"version-filter\"\\n            class=\"search-input\"\\n            placeholder=\"Digite a versão...\"\\n          />\\n          <button class=\"scroll-button top\" onclick=\"scrollToBottom()\">\\n            <img\\n              src=\"https://img.icons8.com/material-outlined/24/000000/down.png\"\\n            />\\n          </button>\\n        </div>\\n        <div class=\"scrollable-box\">\\n          <table>\\n            <thead>\\n              <tr>\\n                <th>Unidade</th>\\n                <th>Versão</th>\\n              </tr>\\n            </thead>\\n            <tbody id=\"config-table-body\">\\n              <!-- Conteúdo gerado dinamicamente -->\\n            </tbody>\\n          </table>\\n        </div>\\n        <div class=\"control-container\">\\n          <select id=\"version-select\">\\n            <!-- Opções serão preenchidas dinamicamente -->\\n          </select>\\n          <button\\n            class=\"apply-icon-button\"\\n            onclick=\"applyVersionToAll(document.getElementById(\\'version-select\\').value)\"\\n          >\\n            <img\\n              src=\"https://static-00.iconduck.com/assets.00/change-icon-2048x1955-gw0ovgy9.png\"\\n            />\\n          </button>\\n          <button\\n            class=\"apply-all-button\"\\n            onclick=\"showApplyAllModal(document.getElementById(\\'version-select\\').value)\"\\n          >\\n            Atualizar\\n          </button>\\n        </div>\\n        <button class=\"scroll-button bottom\" onclick=\"scrollToTop()\">\\n          <img\\n            src=\"https://img.icons8.com/material-outlined/24/000000/up.png\"\\n          />\\n        </button>\\n      </div>\\n    </div>\\n\\n    <!-- Modal de Erro -->\\n    <div id=\"error-modal\" class=\"modal\">\\n      <div class=\"modal-content\">\\n        <span class=\"close\" onclick=\"closeModal()\">&times;</span>\\n        <p id=\"modal-message\"></p>\\n      </div>\\n    </div>\\n\\n    <!-- Modal de Aplicar a Todas -->\\n    <div id=\"apply-all-modal\" class=\"modal\">\\n      <div id=\"apply-all-modal-content\" class=\"modal-content\">\\n        <!-- Conteúdo gerado dinamicamente -->\\n      </div>\\n    </div>\\n\\n    <!-- Modal de Confirmar Status -->\\n    <div id=\"toggle-status-modal\" class=\"modal\">\\n      <div id=\"toggle-status-modal-content\" class=\"modal-content\">\\n        <!-- Conteúdo gerado dinamicamente -->\\n      </div>\\n    </div>\\n    <script>\\n      function goToObservability() {\\n        window.location.href = \\'/api/v1/observability-interface\\';\\n      }\\n    </script>\\n  </body>\\n</html>\\n' to have property 'body'\n    at Context.eval (webpack:///./cypress/e2e/AWS/versao_api.cy.js:26:37)"},"stage":"finished","steps":[{"name":"\"before each\" hooks","steps":[{"status":"passed","statusDetails":{},"stage":"finished","steps":[{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1756744649794,"name":"will not intercept requests to save bodies","stop":1756744649795}],"attachments":[],"parameters":[{"name":"To access request bodies","value":"add environment variable: `allureAddBodiesToRequests`\n(value is requests split by comma that you wish to save, to save all set '*')"},{"name":"To skip this message","value":"add environment variable `allureSkipSteps: '*\\[cypress-allure-adapter\\]*' `"}],"start":1756744649972,"name":"\"before each\" hook: [cypress-allure-adapter]","stop":1756744649973},{"status":"passed","statusDetails":{},"stage":"finished","steps":[{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1756744649798,"name":"login","stop":1756744649798},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"Response Status","value":"200"},{"name":"Request URL","value":"https://amei-homolog.amorsaude.com.br/api/v1/security/login"},{"name":"Request Body","value":"{\"email\":\"ivan.santos+1@amorsaude.com\",\"password\":\"Iv@n198529\"}"}],"start":1756744649798,"name":"request: POST, /api/v1/security/login","stop":1756744650284},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1756744650284,"name":"refreshToken","stop":1756744650284},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"Response Status","value":"201"},{"name":"Request URL","value":"https://amei-homolog.amorsaude.com.br/api/v1/security/refresh-token?clinicId=483"},{"name":"Request Body","value":"{\"automated_test\":\"automated_test\"}"}],"start":1756744650284,"name":"request: POST, /api/v1/security/refresh-token?clinicId=483","stop":1756744650334}],"attachments":[],"parameters":[],"start":1756744649973,"name":"\"before each\" hook","stop":1756744650342}],"status":"passed","statusDetails":{},"stage":"finished","attachments":[],"parameters":[],"start":1756744649972,"stop":1756744650342},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"Response Status","value":"200"},{"name":"Request URL","value":"https://amei-homolog.amorsaude.com.br/api/v1/versioning-interface"},{"name":"Request Body","value":""}],"start":1756744650338,"name":"request: GET, /api/v1/versioning-interface","stop":1756744650388}],"attachments":[],"parameters":[],"labels":[{"name":"package","value":"cypress\\e2e\\AWS\\versao_api.cy.js"},{"name":"path","value":"cypress\\e2e\\AWS\\versao_api.cy.js"},{"name":"parentSuite","value":"Módulo - Versão API"},{"name":"suite","value":"Módulo - Versão API - Versioning Interface"}],"links":[],"start":1756744649971,"name":"Validar retorno 200 - /api/v1/versioning-interface","fullName":"Módulo - Versão API Módulo - Versão API - Versioning Interface Validar retorno 200 - /api/v1/versioning-interface","stop":1756744653463}